
<div class="row">
    @foreach (var abilityScore in Attributes)
    {
        <div class="col-md-4 mb-3">
            <div class="form-group">
                <label>@abilityScore.Name:</label>
                <select class="form-control" @onchange="(e) => UpdatePointsRemaining(abilityScore, e)">
                    <option value="0"
                            selected="@(abilityScore.Value == 0)">
                        --
                    </option>
                    @foreach (var option in abilityScore.Options)
                    {
                        <option value="@option"
                                selected="@(option == abilityScore.Value)">
                            @option
                        </option>
                    }
                </select>
                <small class="form-text text-muted">Total: @abilityScore.Value</small>
            </div>
        </div>
    }
</div>


@* <EditForm OnValidSubmit="ApplyAttributes" EditContext="editContext" FormName="@abilitiesFormName">
    <div class="row">
        @foreach (var abilityScore in CharacterAttributesFormModel.Attributes)
        {
            <div class="col-md-4 mb-3">
                <div class="form-group">
                    <label>@abilityScore.Name:</label>
                    <InputSelect ValueExpression="@(()=>abilityScore.Value)"
                                 Value="@abilityScore.Value"
                                 ValueChanged="@((int value)=>UpdatePointsRemainingInt(abilityScore, value))"
                                 class="form-control">
                        <option value="0"
                                selected="@(abilityScore.Value == 0)">
                            --
                        </option>
                        @foreach (var option in Options)
                        {
                            <option value="@option"
                                    selected="@(option == abilityScore.Value)">
                                @option
                            </option>
                        }
                    </InputSelect>
                    <small class="form-text text-muted">Total: @abilityScore.Value</small>
                </div>
            </div>
        }
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm> *@

@code {

    public List<CharacterAttribute> Attributes { get; set; }

    protected override Task OnInitializedAsync()
    {
        Attributes = new List<CharacterAttribute>
        {
            new CharacterAttribute { Name = "Strength" },
            new CharacterAttribute { Name = "Dexterity" },
            new CharacterAttribute { Name = "Constitution" },
            new CharacterAttribute { Name = "Intelligence" },
            new CharacterAttribute { Name = "Wisdom" },
            new CharacterAttribute { Name = "Charisma" }
        };

        foreach (var item in Attributes)
        {
            item.Options = GetAvailableOptions(item.Name);
        }

        return base.OnInitializedAsync();
    }

    private void UpdatePointsRemaining(CharacterAttribute attribute, ChangeEventArgs e)
    {
        var changedAtribure = Attributes.First(a => a.Name.Equals(attribute.Name));
        changedAtribure.Value = int.Parse(e.Value.ToString());

        foreach (var item in Attributes)
        {
            item.Options = GetAvailableOptions(item.Name);
        }

        StateHasChanged();
    }

    private IEnumerable<int> GetAvailableOptions(string name)
    {
        var allOptions = new int[] { 15, 14, 13, 12, 10, 8 };

        var r = Attributes.Where(a => !a.Name.Equals(name)).Select(a => a.Value);

        return allOptions.Where(op => r.All(a => a != op));
    }

    public class CharacterAttribute
    {
        public string Name { get; set; }
        public int Value { get; set; }
        public IEnumerable<int> Options { get; set; }
    }
}
