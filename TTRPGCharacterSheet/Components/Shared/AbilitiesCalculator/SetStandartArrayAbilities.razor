@using TTRPGCharacterSheet.Components.BaseComponents;
@inherits SetAbilitiesBase;

<EditForm OnValidSubmit="ApplyAttributes" EditContext="editContext" FormName="@abilitiesFormName">
    <div class="row">
        @foreach (var abilityScore in CharacterAttributesFormModel.Attributes)
        {
            <div class="col-md-4 mb-3">
                <div class="form-group">
                    <label>@abilityScore.Value:</label>

                    <InputSelect ValueExpression="@(() => abilityScore.Name)"
                                 Value="@abilityScore.Name"
                                 ValueChanged="@((string value)=>UpdatePointsRemaining(abilityScore, value))"
                                 class="form-control">
                        <option value="@string.Empty" selected="@(abilityScore.Id == null)">--</option>
                        @foreach (var option in (CharacterAttribute[])Enum.GetValues(typeof(CharacterAttribute)))
                        {
                            <option value="@option.ToString()" selected="@(option == abilityScore.Id)">@option</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => abilityScore.Value)" />
                </div>
            </div>
        }
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    private int[] options = new[] { 15, 14, 13, 12, 10, 8 };

    public override AbilitiesGenerationMode GenerationMode
    {
        get => AbilitiesGenerationMode.StandartArray;
    }


    protected override void HandleValidationRequested(object sender, ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        foreach (var attribute in CharacterAttributesFormModel.Attributes)
            if (attribute.Id == null || attribute.Name == string.Empty)
                messageStore?.Add(() => attribute.Value, "Please select a value");
    }


    private void RollAbilities()
    {
        for (int j = 0; j < options.Length; j++)
        {
            CharacterAttributesFormModel.Attributes[j].Id = null;
            CharacterAttributesFormModel.Attributes[j].Value = options[j];
        }

        StateHasChanged();
    }


    private void UpdatePointsRemaining(CharacterAttributeModel attribute, string attributeName)
    {
        messageStore?.Clear();
        CharacterAttribute? attributeId = string.IsNullOrEmpty(attributeName) ? null : abilityToName[attributeName];

        if (attributeId is not null)
        {

            var duplicate = CharacterAttributesFormModel.Attributes
                                .FirstOrDefault(attr => attr.Id == attributeId && attr.Value != attribute.Value);

            if (duplicate != null)
            {
                duplicate.Id = null;
                duplicate.Name = string.Empty;
            }
        }

        attribute.Id = attributeId;
        attribute.Name = attributeName;
    }
}
