@using TTRPGCharacterSheet.Models;

@if (AbilityInfo != null)
{
    <div class="ability-info">
        <h2>@AbilityInfo.Name: @AbilityInfo.BaseValue</h2>
        <p>Check:  @AbilityModifier</p>
        <p>Saving Throw: @SavingThrowModifier</p>
        @if (AbilityInfo.Skills?.Any() == true)
        {
            <h3>Skills:</h3>

            <ul>
                @foreach (var skill in AbilityInfo.Skills)
                {
                    var proficiencyClass = skill.Proficiency switch
                    {
                        ProficiencyLevel.None => "none",
                        ProficiencyLevel.JakeOfAllTrades => "jake-of-all-trades",
                        ProficiencyLevel.Proficiency => "proficiency",
                        ProficiencyLevel.Expertise => "expertise",
                        _ => string.Empty
                    };

                    <li class="@proficiencyClass">@skill.Name: @CalculateSkillModifier(skill)</li>
                }

            </ul>
        }
    </div>
}

@code {
    [Parameter]
    public AbilityInfo AbilityInfo { get; set; }

    [Parameter]
    public int ProficiencyBonus { get; set; }

    protected override void OnParametersSet()
    {
        if (AbilityInfo == null)
        {
            throw new ArgumentNullException(nameof(AbilityInfo), "AbilityInfo cannot be null.");
        }

        if (ProficiencyBonus < 0)
        {
            throw new ArgumentOutOfRangeException(nameof(ProficiencyBonus), "Proficiency Bonus must be non-negative.");
        }
    }

    private int SavingThrowModifier
    {
        get
        {
            return AbilityModifier + AbilityInfo.SavingThrowBonus + (AbilityInfo.ProficiencyInSavingThrow ? ProficiencyBonus : 0);
        }
    }

    private int AbilityModifier
    {
        get
        {
            return (AbilityInfo.BaseValue - 10) / 2;
        }
    }

    private int CalculateSkillModifier(Skill skill)
    {
        return AbilityModifier + GetProficiencyBonus(skill.Proficiency) + skill.AdditionalBonus;
    }

    private int GetProficiencyBonus(ProficiencyLevel skillProficiency)
    {
        switch (skillProficiency)
        {
            case ProficiencyLevel.None:
                return 0;
            case ProficiencyLevel.Proficiency:
                return ProficiencyBonus;
            case ProficiencyLevel.Expertise:
                return ProficiencyBonus * 2;
            case ProficiencyLevel.JakeOfAllTrades:
                return ProficiencyBonus / 2;
            default:
                return 0;
        }
    }

}
